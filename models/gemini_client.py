import google.generativeai as genai
from config import Config
from typing import Dict, List, Optional
import json

class GeminiClient:
    def __init__(self):
        genai.configure(api_key=Config.GEMINI_API_KEY)

        # Use gemini-flash-lite-latest as requested
        try:
            self.model = genai.GenerativeModel('gemini-flash-lite-latest')
            print("Successfully initialized with model: gemini-flash-lite-latest")
        except Exception as e:
            print(f"Failed to initialize gemini-flash-lite-latest: {e}")
            # Fallback to other models
            model_names = [
                'gemini-pro',
                'gemini-1.5-flash-latest',
                'gemini-1.5-flash',
                'gemini-1.5-flash-001'
            ]

            self.model = None
            for model_name in model_names:
                try:
                    self.model = genai.GenerativeModel(model_name)
                    print(f"Successfully initialized with fallback model: {model_name}")
                    break
                except Exception as fallback_error:
                    print(f"Failed to initialize model {model_name}: {fallback_error}")
                    continue

            if self.model is None:
                raise Exception("Could not initialize any Gemini model")

        self.conversation_history: List[Dict] = []

    def generate_response(self, user_message: str, context_data: Optional[Dict] = None) -> str:
        """
        Generate AI response using Gemini 1.5 Flash with optional context data
        """
        try:
            # Build the prompt with context
            prompt = self._build_prompt(user_message, context_data)

            # Generate response
            response = self.model.generate_content(prompt)

            # Store conversation history
            self._update_conversation_history(user_message, response.text)

            return response.text

        except Exception as e:
            return f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n: {str(e)}"

    def _build_prompt(self, user_message: str, context_data: Optional[Dict] = None) -> str:
        """
        Build comprehensive prompt for AriX - Professional Investment Analyst
        """
        system_prompt = """B·∫°n l√† AriX - C·ªë v·∫•n Ph√¢n t√≠ch ƒê·∫ßu t∆∞ Chuy√™n nghi·ªáp c·ªßa h·ªá th·ªëng IQX.

**ƒê·ªäNH DANH & VAI TR√í:**
- T√™n: AriX (AI Investment Research & eXpert)
- Vai tr√≤: C·ªë v·∫•n ph√¢n t√≠ch ƒë·∫ßu t∆∞ chuy√™n nghi·ªáp
- Chuy√™n m√¥n: Ph√¢n t√≠ch ch·ª©ng kho√°n, ƒë·ªãnh gi√° doanh nghi·ªáp, t∆∞ v·∫•n ƒë·∫ßu t∆∞

**PHONG C√ÅCH GIAO TI·∫æP:**
- Nghi√™m t√∫c, chuy√™n nghi·ªáp nh∆∞ chuy√™n gia trong c√¥ng ty ch·ª©ng kho√°n
- Chu·∫©n m·ª±c, ng·∫Øn g·ªçn, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ
- Lu√¥n c√≥ s·ªë li·ªáu d·∫´n ch·ª©ng c·ª• th·ªÉ
- H·∫°n ch·∫ø c·∫£m x√∫c c√° nh√¢n, t·∫≠p trung v√†o ph√¢n t√≠ch kh√°ch quan
- X∆∞ng h√¥: "AriX ƒë√°nh gi√°...", "Theo ph√¢n t√≠ch c·ªßa AriX...", "AriX khuy·∫øn ngh·ªã..."

**NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:**
1. **S·ªë li·ªáu l√† c·ªët l√µi**: Lu√¥n d·∫´n ch·ª©ng s·ªë li·ªáu c·ª• th·ªÉ (gi√°, t·ª∑ l·ªá, th·ªùi gian)
2. **Ph√¢n t√≠ch c√≥ cƒÉn c·ª©**: Gi·∫£i th√≠ch logic ƒë·∫±ng sau m·ªói nh·∫≠n ƒë·ªãnh
3. **Kh√°ch quan tuy·ªát ƒë·ªëi**: Kh√¥ng thi√™n v·ªã, ƒë∆∞a ra c·∫£ ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm
4. **Ng·∫Øn g·ªçn hi·ªáu qu·∫£**: Th√¥ng tin c·ªët l√µi trong 2-3 ƒëo·∫°n ng·∫Øn
5. **ƒê·ªãnh h∆∞·ªõng h√†nh ƒë·ªông**: Lu√¥n k·∫øt th√∫c b·∫±ng khuy·∫øn ngh·ªã c·ª• th·ªÉ

**FORMAT PH·∫¢N H·ªíI (Markdown):**
```
### üìä `M√É C·ªî PHI·∫æU` - T√™n C√¥ng ty

**Gi√° hi·ªán t·∫°i:** [s·ªë] VND (**[+/-]%** üìàüìâ)

**ƒê√°nh gi√° t·ª´ AriX:**
- ‚úÖ **Khuy·∫øn ngh·ªã:** [Mua/N·∫Øm gi·ªØ/B√°n]
- üìä **ƒê·ªãnh gi√° m·ª•c ti√™u:** [s·ªë] VND
- üîç **Risk-Reward:** [Th·∫•p/Trung b√¨nh/Cao]

**CƒÉn c·ª© ph√¢n t√≠ch:**
1. [L√Ω do 1 v·ªõi s·ªë li·ªáu]
2. [L√Ω do 2 v·ªõi s·ªë li·ªáu]
3. [L√Ω do 3 v·ªõi s·ªë li·ªáu]

> ‚ö†Ô∏è **L∆∞u √Ω:** ƒê·∫ßu t∆∞ c√≥ r·ªßi ro. Quy·∫øt ƒë·ªãnh cu·ªëi c√πng thu·ªôc v·ªÅ nh√† ƒë·∫ßu t∆∞.
```

**V√ç D·ª§ PHONG C√ÅCH:**
‚ùå Tr√°nh: "VCB l√† c·ªï phi·∫øu tuy·ªát v·ªùi, t√¥i nghƒ© b·∫°n n√™n mua!"
‚úÖ ƒê√∫ng: "AriX ƒë√°nh gi√° VCB ·ªü m·ª©c Khuy·∫øn ngh·ªã MUA v·ªõi m·ª•c ti√™u 95.000 VND (+8.2%) d·ª±a tr√™n P/E forward 11.2x, ROE 18.5% v√† tƒÉng tr∆∞·ªüng t√≠n d·ª•ng 12%."

**Lƒ®NH V·ª∞C CHUY√äN M√îN:**
- Ph√¢n t√≠ch c∆° b·∫£n (Fundamental Analysis)
- ƒê·ªãnh gi√° theo P/E, P/B, DCF, EV/EBITDA
- Ph√¢n t√≠ch b√°o c√°o t√†i ch√≠nh
- ƒê√°nh gi√° r·ªßi ro v√† c∆° h·ªôi
- Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ v·ªõi m·ª•c ti√™u gi√° c·ª• th·ªÉ

Lu√¥n nh·ªõ: AriX l√† chuy√™n gia ph√¢n t√≠ch kh√°ch quan, kh√¥ng ph·∫£i salesman."""

        # Add context data if available
        context_section = ""
        if context_data:
            context_section = f"\n\n**D·ªÆ LI·ªÜU THAM KH·∫¢O:**\n```json\n{json.dumps(context_data, ensure_ascii=False, indent=2)}\n```"

        # Add conversation history
        history_section = ""
        if self.conversation_history:
            history_section = "\n\n**L·ªäCH S·ª¨ H·ªòI THO·∫†I G√ÅN ƒê√ÇY:**\n"
            for item in self.conversation_history[-2:]:  # Last 2 exchanges
                history_section += f"üë§ **User:** {item['user']}\nü§ñ **AriX:** {item['ai']}\n\n"

        full_prompt = f"{system_prompt}{context_section}{history_section}\n\n**C√ÇU H·ªéI HI·ªÜN T·∫†I:** {user_message}\n\n**Y√äU C·∫¶U:** Tr·∫£ l·ªùi b·∫±ng Markdown theo phong c√°ch AriX chuy√™n nghi·ªáp, c√≥ s·ªë li·ªáu d·∫´n ch·ª©ng."

        return full_prompt

    def _update_conversation_history(self, user_message: str, ai_response: str):
        """
        Update conversation history with size limit
        """
        self.conversation_history.append({
            'user': user_message,
            'ai': ai_response
        })

        # Keep only recent conversations
        if len(self.conversation_history) > Config.MAX_CONVERSATION_HISTORY:
            self.conversation_history = self.conversation_history[-Config.MAX_CONVERSATION_HISTORY:]

    def clear_history(self):
        """
        Clear conversation history
        """
        self.conversation_history = []

    def analyze_stock_data(self, stock_symbol: str, data: Dict) -> str:
        """
        Specialized method for stock data analysis
        """
        analysis_prompt = f"""
        H√£y ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu {stock_symbol} sau ƒë√¢y v√† ƒë∆∞a ra nh·∫≠n x√©t v·ªÅ:
        1. Xu h∆∞·ªõng gi√°
        2. Kh·ªëi l∆∞·ª£ng giao d·ªãch
        3. C√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng
        4. ƒê√°nh gi√° t·ªïng quan v√† khuy·∫øn ngh·ªã (n·∫øu c√≥ ƒë·ªß th√¥ng tin)

        D·ªØ li·ªáu: {json.dumps(data, ensure_ascii=False, indent=2)}
        """

        try:
            response = self.model.generate_content(analysis_prompt)
            return response.text
        except Exception as e:
            return f"Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu: {str(e)}"