#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ ingest d·ªØ li·ªáu t√†i ch√≠nh t·ª´ VNStock v√†o Qdrant Vector Database v·ªõi 32 workers

Usage:
    python ingest_vnstock_data.py --all               # Ingest t·∫•t c·∫£ symbol (APPEND - m·∫∑c ƒë·ªãnh)
    python ingest_vnstock_data.py VCI HPG FPT         # Ingest c√°c symbol c·ª• th·ªÉ (APPEND)
    python ingest_vnstock_data.py --all --delete      # X√ìA collection c≈© v√† ingest t·∫•t c·∫£
    python ingest_vnstock_data.py VCI --delete        # X√ìA collection c≈© v√† ingest VCI
"""

import sys
import argparse
import requests
import json
from qdrant_client import QdrantClient, models
from config import Config
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
from threading import Lock
from vnstock_data import Listing, Finance
import time
from datetime import datetime


# ---------- EMBEDDING ----------
def get_embedding(text: str, show_time: bool = False):
    """Get embedding from OpenAI API"""
    headers = {
        "Authorization": f"Bearer {Config.OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": Config.EMBEDDING_MODEL,
        "input": text
    }
    max_retries = 3
    for attempt in range(max_retries):
        try:
            api_start = time.time()
            resp = requests.post(f"{Config.OPENAI_BASE}/embeddings", headers=headers, json=payload, timeout=30)
            resp.raise_for_status()
            api_time = time.time() - api_start
            
            if show_time and api_time > 2:  # Log n·∫øu API ch·∫≠m > 2s
                print(f"      ‚è±Ô∏è  API embedding m·∫•t {api_time:.2f}s")
            
            return resp.json()["data"][0]["embedding"]
        except Exception as e:
            if attempt < max_retries - 1:
                print(f"      ‚ö†Ô∏è  L·ªói API (attempt {attempt+1}/{max_retries}), retry sau 1s...")
                time.sleep(1)
                continue
            else:
                raise e


# ---------- L·∫§Y DANH S√ÅCH SYMBOL ----------
def get_all_symbols():
    """L·∫•y danh s√°ch t·∫•t c·∫£ m√£ c·ªï phi·∫øu t·ª´ VNStock"""
    print("üìã ƒêang l·∫•y danh s√°ch t·∫•t c·∫£ m√£ c·ªï phi·∫øu...")
    try:
        listing = Listing(source='VCI')
        df = listing.all_symbols()
        symbols = df['ticker'].tolist() if 'ticker' in df.columns else df['symbol'].tolist()
        print(f"‚úÖ ƒê√£ l·∫•y {len(symbols)} m√£ c·ªï phi·∫øu")
        return symbols
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch symbol: {e}")
        return []


# ---------- L·∫§Y D·ªÆ LI·ªÜU T√ÄI CH√çNH T·ª™ VNSTOCK ----------
def fetch_financial_data(symbol: str):
    """
    L·∫•y d·ªØ li·ªáu t√†i ch√≠nh t·ª´ VNStock cho m·ªôt symbol
    Bao g·ªìm: Balance Sheet, Income Statement, Cash Flow
    """
    try:
        print(f"  üîπ ƒêang l·∫•y d·ªØ li·ªáu cho {symbol}...")
        fin = Finance(symbol=symbol, period='year', source='VCI')
        
        data_blocks = []
        
        # 1. Balance Sheet (B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n)
        try:
            balance_sheet = fin.balance_sheet(lang='vi')
            if balance_sheet is not None and not balance_sheet.empty:
                data_blocks.append({
                    'type': 'balance_sheet',
                    'data': balance_sheet.to_dict(orient='records'),
                    'name': 'B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n'
                })
        except Exception as e:
            print(f"    ‚ö†Ô∏è  Kh√¥ng l·∫•y ƒë∆∞·ª£c Balance Sheet cho {symbol}: {e}")
        
        # 2. Income Statement (B√°o c√°o k·∫øt qu·∫£ kinh doanh)
        try:
            income_statement = fin.income_statement(lang='vi')
            if income_statement is not None and not income_statement.empty:
                data_blocks.append({
                    'type': 'income_statement',
                    'data': income_statement.to_dict(orient='records'),
                    'name': 'B√°o c√°o k·∫øt qu·∫£ kinh doanh'
                })
        except Exception as e:
            print(f"    ‚ö†Ô∏è  Kh√¥ng l·∫•y ƒë∆∞·ª£c Income Statement cho {symbol}: {e}")
        
        # 3. Cash Flow (B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá)
        try:
            cash_flow = fin.cash_flow(lang='vi')
            if cash_flow is not None and not cash_flow.empty:
                data_blocks.append({
                    'type': 'cash_flow',
                    'data': cash_flow.to_dict(orient='records'),
                    'name': 'B√°o c√°o l∆∞u chuy·ªÉn ti·ªÅn t·ªá'
                })
        except Exception as e:
            print(f"    ‚ö†Ô∏è  Kh√¥ng l·∫•y ƒë∆∞·ª£c Cash Flow cho {symbol}: {e}")
        
        print(f"  ‚úÖ ƒê√£ l·∫•y {len(data_blocks)} lo·∫°i b√°o c√°o cho {symbol}")
        return data_blocks
        
    except Exception as e:
        print(f"  ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cho {symbol}: {e}")
        return []


# ---------- CHUY·ªÇN D·ªÆ LI·ªÜU TH√ÄNH TEXT ----------
def financial_data_to_text(symbol: str, data_blocks: list):
    """
    Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t√†i ch√≠nh th√†nh c√°c ƒëo·∫°n text c√≥ √Ω nghƒ©a
    M·ªói ƒëo·∫°n text ƒë·∫°i di·ªán cho m·ªôt nh√≥m ch·ªâ ti√™u t√†i ch√≠nh
    """
    texts = []
    
    for block in data_blocks:
        block_type = block['type']
        block_name = block['name']
        data = block['data']
        
        if not data:
            continue
        
        # G·ªôp c√°c record theo nƒÉm
        for record in data:
            # L·ªçc c√°c ch·ªâ ti√™u c√≥ gi√° tr·ªã
            metrics = []
            period_info = ""
            
            for key, value in record.items():
                # Skip null, empty, or zero values
                if value is None or value == "" or value == 0:
                    continue
                
                # L·∫•y th√¥ng tin k·ª≥ b√°o c√°o
                if key in ['report_period', 'year', 'quarter', 'M√£ CP']:
                    if key == 'M√£ CP':
                        continue  # Skip v√¨ ƒë√£ c√≥ trong metadata
                    period_info += f" {key}: {value}"
                else:
                    # Format gi√° tr·ªã
                    if isinstance(value, (int, float)):
                        metrics.append(f"{key}: {value:,.0f}")
                    else:
                        metrics.append(f"{key}: {value}")
            
            # T·∫°o text chunk (gi·ªõi h·∫°n 50 ch·ªâ ti√™u m·ªói chunk ƒë·ªÉ tr√°nh qu√° d√†i)
            if metrics:
                chunk_size = 50
                for i in range(0, len(metrics), chunk_size):
                    chunk_metrics = metrics[i:i+chunk_size]
                    text = f"M√£ c·ªï phi·∫øu: {symbol}\n"
                    text += f"Lo·∫°i b√°o c√°o: {block_name}\n"
                    if period_info:
                        text += f"K·ª≥ b√°o c√°o:{period_info}\n"
                    text += "\n" + "\n".join(chunk_metrics)
                    
                    texts.append({
                        'text': text,
                        'type': block_type,
                        'name': block_name
                    })
    
    return texts


# ---------- X·ª¨ L√ù M·ªòT SYMBOL ----------
def process_single_symbol(symbol: str, qdrant_client, collection_name: str, offset_id: int, lock: Lock):
    """
    X·ª≠ l√Ω m·ªôt symbol: l·∫•y d·ªØ li·ªáu, t·∫°o embedding, v√† l∆∞u v√†o Qdrant
    """
    try:
        start_time = time.time()
        
        # 1. L·∫•y d·ªØ li·ªáu
        data_blocks = fetch_financial_data(symbol)
        if not data_blocks:
            return 0, symbol, "No data"
        
        # 2. Chuy·ªÉn th√†nh text
        text_chunks = financial_data_to_text(symbol, data_blocks)
        if not text_chunks:
            return 0, symbol, "No text chunks"
        
        print(f"  üìù {symbol}: ƒê√£ t·∫°o {len(text_chunks)} text chunks, b·∫Øt ƒë·∫ßu embedding song song...")
        
        # 3. T·∫°o embedding v√† points SONG SONG v·ªõi ThreadPool
        points = []
        embedding_start = time.time()
        
        def create_embedding_for_chunk(idx_chunk):
            idx, chunk = idx_chunk
            try:
                embedding = get_embedding(chunk['text'], show_time=False)
                
                with lock:
                    point_id = offset_id[0]
                    offset_id[0] += 1
                
                return {
                    'id': point_id,
                    'embedding': embedding,
                    'chunk': chunk,
                    'idx': idx
                }
            except Exception as e:
                print(f"    ‚ö†Ô∏è  L·ªói khi t·∫°o embedding cho chunk {idx} c·ªßa {symbol}: {e}")
                return None
        
        # X·ª≠ l√Ω song song v·ªõi 10 workers cho m·ªói symbol (tr√°nh qu√° t·∫£i API)
        with ThreadPoolExecutor(max_workers=10) as embed_executor:
            embedding_futures = list(embed_executor.map(create_embedding_for_chunk, enumerate(text_chunks)))
        
        # T·∫°o points t·ª´ k·∫øt qu·∫£
        successful_embeddings = [f for f in embedding_futures if f is not None]
        for result in successful_embeddings:
            point = models.PointStruct(
                id=result['id'],
                vector=result['embedding'],
                payload={
                    'ticker': symbol,
                    'text': result['chunk']['text'],
                    'type': result['chunk']['type'],
                    'report_name': result['chunk']['name'],
                    'timestamp': datetime.now().isoformat()
                }
            )
            points.append(point)
        
        embedding_time = time.time() - embedding_start
        print(f"    ‚ö° {symbol}: Ho√†n th√†nh {len(points)}/{len(text_chunks)} embeddings trong {embedding_time:.2f}s")
        
        # 4. L∆∞u v√†o Qdrant
        if points:
            upsert_start = time.time()
            qdrant_client.upsert(collection_name=collection_name, points=points)
            upsert_time = time.time() - upsert_start
            total_time = time.time() - start_time
            
            print(f"  ‚úÖ {symbol}: ƒê√£ l∆∞u {len(points)} ƒëi·ªÉm d·ªØ li·ªáu (total: {total_time:.2f}s, upsert: {upsert_time:.2f}s)")
            return len(points), symbol, "Success"
        else:
            return 0, symbol, "No points created"
            
    except Exception as e:
        print(f"  ‚ùå L·ªói khi x·ª≠ l√Ω {symbol}: {e}")
        return 0, symbol, str(e)


# ---------- INGEST V√ÄO QDRANT ----------
def ingest_to_qdrant(symbols: list, recreate_collection: bool = True, max_workers: int = 32):
    """
    Ingest d·ªØ li·ªáu t√†i ch√≠nh v√†o Qdrant v·ªõi multi-threading
    
    Args:
        symbols: Danh s√°ch m√£ c·ªï phi·∫øu
        recreate_collection: N·∫øu True, x√≥a v√† t·∫°o l·∫°i collection
        max_workers: S·ªë l∆∞·ª£ng worker song song
    """
    # 1. K·∫øt n·ªëi Qdrant
    qdrant = QdrantClient(host=Config.QDRANT_HOST, port=Config.QDRANT_PORT)
    collection_name = Config.QDRANT_COLLECTION
    
    # 2. T·∫°o/ki·ªÉm tra collection
    if recreate_collection:
        if qdrant.collection_exists(collection_name):
            print(f"üóëÔ∏è  X√ìA collection c≈©: {collection_name}")
            qdrant.delete_collection(collection_name)
        
        print(f"üÜï T·∫°o collection m·ªõi: {collection_name}")
        qdrant.create_collection(
            collection_name=collection_name,
            vectors_config=models.VectorParams(size=3072, distance=models.Distance.COSINE)
        )
    else:
        if not qdrant.collection_exists(collection_name):
            print(f"üÜï Collection ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi: {collection_name}")
            qdrant.create_collection(
                collection_name=collection_name,
                vectors_config=models.VectorParams(size=3072, distance=models.Distance.COSINE)
            )
        else:
            print(f"‚ûï APPEND - Th√™m d·ªØ li·ªáu v√†o collection hi·ªán t·∫°i: {collection_name}")
    
    # 3. Get offset ID
    offset_id = [0]
    try:
        scroll_result = qdrant.scroll(
            collection_name=collection_name, 
            limit=1, 
            with_payload=False, 
            with_vectors=False
        )
        if scroll_result[0]:
            offset_id[0] = max([p.id for p in scroll_result[0]]) + 1
    except:
        offset_id[0] = 0
    
    # 4. X·ª≠ l√Ω song song v·ªõi ThreadPoolExecutor
    print(f"\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(symbols)} symbol v·ªõi {max_workers} workers...")
    print(f"üí° M·ªói symbol s·∫Ω c√≥ 3 lo·∫°i b√°o c√°o, m·ªói b√°o c√°o c√≥ nhi·ªÅu text chunks c·∫ßn embedding\n")
    
    lock = Lock()
    results = []
    start_time = time.time()
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {
            executor.submit(process_single_symbol, symbol, qdrant, collection_name, offset_id, lock): symbol 
            for symbol in symbols
        }
        
        completed = 0
        for future in as_completed(futures):
            completed += 1
            symbol = futures[future]
            try:
                num_points, sym, status = future.result()
                results.append({'symbol': sym, 'points': num_points, 'status': status})
                elapsed = time.time() - start_time
                avg_time = elapsed / completed if completed > 0 else 0
                eta = avg_time * (len(symbols) - completed) if completed > 0 else 0
                print(f"\nüìä Ti·∫øn ƒë·ªô: {completed}/{len(symbols)} ({completed*100//len(symbols)}%) | Th·ªùi gian: {elapsed:.1f}s | ETA: {eta:.1f}s\n")
            except Exception as e:
                print(f"  ‚ùå L·ªói khi x·ª≠ l√Ω {symbol}: {e}")
                results.append({'symbol': symbol, 'points': 0, 'status': f'Error: {e}'})
    
    # 5. T·ªïng k·∫øt
    elapsed_time = time.time() - start_time
    total_points = sum(r['points'] for r in results)
    success_count = sum(1 for r in results if r['points'] > 0)
    
    print("\n" + "="*60)
    print("üìä K·∫æT QU·∫¢ T·ªîNG H·ª¢P")
    print("="*60)
    print(f"‚è±Ô∏è  Th·ªùi gian: {elapsed_time:.2f} gi√¢y")
    print(f"‚úÖ Th√†nh c√¥ng: {success_count}/{len(symbols)} symbol")
    print(f"üíæ T·ªïng s·ªë ƒëi·ªÉm d·ªØ li·ªáu: {total_points:,}")
    print(f"‚ö° T·ªëc ƒë·ªô: {len(symbols)/elapsed_time:.2f} symbol/gi√¢y")
    
    # Chi ti·∫øt c√°c symbol th·∫•t b·∫°i
    failed = [r for r in results if r['points'] == 0]
    if failed:
        print(f"\n‚ö†Ô∏è  C√°c symbol th·∫•t b·∫°i ({len(failed)}):")
        for r in failed[:10]:  # Hi·ªÉn th·ªã 10 symbol ƒë·∫ßu ti√™n
            print(f"  - {r['symbol']}: {r['status']}")
        if len(failed) > 10:
            print(f"  ... v√† {len(failed)-10} symbol kh√°c")
        
        # L∆∞u danh s√°ch symbol th·∫•t b·∫°i v√†o file
        failed_file = 'failed_symbols.txt'
        with open(failed_file, 'w') as f:
            for r in failed:
                f.write(f"{r['symbol']}\t{r['status']}\n")
        print(f"\nüíæ ƒê√£ l∆∞u danh s√°ch {len(failed)} symbol th·∫•t b·∫°i v√†o: {failed_file}")
        print(f"üí° Retry: python ingest_vnstock_data.py --retry {failed_file}")
    
    return results


# ---------- MAIN ----------
def main():
    parser = argparse.ArgumentParser(
        description='Ingest d·ªØ li·ªáu t√†i ch√≠nh t·ª´ VNStock v√†o Qdrant',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª•:
  python ingest_vnstock_data.py --all                   # Ingest t·∫•t c·∫£ symbol (APPEND - m·∫∑c ƒë·ªãnh)
  python ingest_vnstock_data.py VCI HPG FPT             # Ingest c√°c symbol c·ª• th·ªÉ (APPEND)
  python ingest_vnstock_data.py --all --workers 64      # D√πng 64 workers (APPEND)
  python ingest_vnstock_data.py --all --delete          # X√ìA collection c≈© v√† t·∫°o m·ªõi
  python ingest_vnstock_data.py VCI --delete            # Ingest VCI v√† X√ìA collection c≈©
  python ingest_vnstock_data.py --retry failed_symbols.txt  # Retry c√°c symbol th·∫•t b·∫°i
        """
    )
    
    parser.add_argument('symbols', nargs='*', help='Danh s√°ch m√£ c·ªï phi·∫øu (ƒë·ªÉ tr·ªëng n·∫øu d√πng --all ho·∫∑c --retry)')
    parser.add_argument('--all', action='store_true', help='Ingest t·∫•t c·∫£ symbol t·ª´ VNStock')
    parser.add_argument('--retry', metavar='FILE', help='Retry c√°c symbol t·ª´ file (v√≠ d·ª•: failed_symbols.txt)')
    parser.add_argument('--workers', type=int, default=32, help='S·ªë l∆∞·ª£ng workers song song (m·∫∑c ƒë·ªãnh: 32)')
    parser.add_argument('--delete', action='store_true', help='X√ìA collection c≈© v√† t·∫°o m·ªõi (m·∫∑c ƒë·ªãnh: th√™m v√†o collection hi·ªán t·∫°i)')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üöÄ VNSTOCK DATA INGESTION TOOL")
    print("=" * 60)
    print(f"üîß Qdrant: {Config.QDRANT_HOST}:{Config.QDRANT_PORT}")
    print(f"üì¶ Collection: {Config.QDRANT_COLLECTION}")
    print(f"‚öôÔ∏è  Workers: {args.workers}")
    print(f"üîÑ Mode: {'DELETE & RECREATE' if args.delete else 'APPEND (m·∫∑c ƒë·ªãnh)'}")
    print("=" * 60 + "\n")
    
    # L·∫•y danh s√°ch symbols
    if args.retry:
        # ƒê·ªçc t·ª´ file retry
        try:
            with open(args.retry, 'r') as f:
                lines = f.readlines()
            symbols = [line.split('\t')[0].strip().upper() for line in lines if line.strip()]
            print(f"üìÇ ƒê·ªçc {len(symbols)} symbol t·ª´ file: {args.retry}")
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {args.retry}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
            sys.exit(1)
    elif args.all:
        symbols = get_all_symbols()
        if not symbols:
            print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch symbol!")
            sys.exit(1)
    elif args.symbols:
        symbols = [s.upper() for s in args.symbols]
    else:
        parser.print_help()
        sys.exit(1)
    
    print(f"\nüìã S·∫Ω x·ª≠ l√Ω {len(symbols)} m√£ c·ªï phi·∫øu")
    
    # Confirm n·∫øu x√≥a collection v·ªõi nhi·ªÅu symbol
    if len(symbols) > 50 and args.delete:
        response = input(f"\n‚ö†Ô∏è  B·∫°n s·∫Øp x·ª≠ l√Ω {len(symbols)} symbol v√† X√ìA to√†n b·ªô d·ªØ li·ªáu c≈©. Ti·∫øp t·ª•c? (yes/no): ")
        if response.lower() not in ['yes', 'y']:
            print("‚ùå ƒê√£ h·ªßy")
            sys.exit(0)
    
    # Ingest
    recreate = args.delete  # Ch·ªâ recreate khi c√≥ flag --delete
    results = ingest_to_qdrant(symbols, recreate_collection=recreate, max_workers=args.workers)
    
    print("\n" + "="*60)
    print("‚úÖ HO√ÄN T·∫§T!")
    print("="*60)


if __name__ == "__main__":
    main()

